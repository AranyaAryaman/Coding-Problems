/*
Problem Description
 
 

Given a string A of size N, find and return the longest palindromic substring in A.

Substring of string A is A[i...j] where 0 <= i <= j < len(A)

Palindrome string:

A string which reads the same backwards. More formally, A is palindrome if reverse(A) = A.

Incase of conflict, return the substring which occurs first ( with the least starting index).



Problem Constraints
1 <= N <= 6000 



Input Format
First and only argument is a string A.



Output Format
Return a string denoting the longest palindromic substring of string A.



Example Input
A = "aaaabaaa"


Example Output
"aaabaaa"
*/

bool isPalindrome(string A){
    for(int i=0;i<A.length()/2;i++){
        if(A[i]!=A[A.length()-1-i])
            return false;
    }
    return true;
}

string Solution::longestPalindrome(string A) {
    int len = INT_MIN;
    int minI = INT_MAX;
    for(int i=0;i<A.length();i++){
        int j = A.length()-i;
        //cout<<j<<endl;
        if(j>len){
            while(j>=0){
                //cout<<j<<" "<<len<<endl;
                if(isPalindrome(A.substr(i,j)) && j > len){
                    minI = i;
                    len = j;
                    //cout<<minI<<" "<<len<<endl;
                    break;
                }
                j--; 
            }
        }     
    }
    return A.substr(minI,len);
}
